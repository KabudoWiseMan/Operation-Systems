Лабораторная работа №3

------------------------------------ReactOS----------------------------------------

1. Создать новый драйвер так же, как во второй лабораторной работе;

2. В файле драйвера подключить библиотеки "ntifs" и "ndk/exfuncs";

3. Создать новую функцию, которая будет находить и выводить процессы. В этой функции создать буфер типа PVOID с помощью функции ExAllocatePool размера sizeof(SYSTEM_PROCESS_INFORMATION). Получить Status с помощью функции ZwQuerySystemInformation. Если вдруг размера буфера не хватило, то очищаем буфер и создаём новый такого размера, который вернула функция ZwQuerySystemInformation. Если Status не STATUS_SUCCESS, тогда очищаем буфер и возвращаем ошибку. Если всё прошло хорошо, то записываем в новую переменную ProcInfo типа PSYSTEM_PROCESS_INFORMATION информацию из буфера. После чего выводим все процессы: в цикле идём по (PSYSTEM_PROCESS_INFORMATION)((ULONG_PTR)ProcInfo + (ULONG_PTR)ProcInfo->NextEntryOffset и обращаемся к &ProcInfo->ImageName, ProcInfo->UniqueProcessId, ProcInfo->InheritedFromUniqueProcessId, ProcInfo->BasePriority. После этого очищаем буфер;

4. Запускаем ReactOS и новый драйвер, как во второй лабораторной работе.

-------------------------------------NetBSD----------------------------------------

1. Создать новый драйвер так же, как во второй лабораторной работе;

2. В файле драйвера подключить библиотеку "sys/proc";

3. В теле драйвера создать указатель it типа struct proc. Запустить цикл PROCLIST_FOREACH с параметрами it и &allproc, в котором сделать вывод информации о процессе, обращаясь к it->p_comm и it->p_pid;

4. Запустить драйвер, как во второй лабораторной работе.